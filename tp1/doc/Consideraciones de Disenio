Consideraciones de DIseño:

Punto de entrada a la API logger:

El usuario tiene visibilidad de la clase Logger, pudiendo a traves de ella loguear mensajes y elegir el archivo .properties a usar. Hay varios metodos de log, cada uno agregando mas parametros permitir loguear informacion mas detallada.

Archivo de COnfiguracion:

El archivo de configuracion esta modelado por la clase Config, que actua como proxy del archivo .properties que contiene la configuracion de la API.

Usos de herencia:

Se utilizo herencia en dos puntos del proyecto. En primer lugar a la hora de representar archivos y salida estandar se uso el patron de diseño adapter, para permitirnos abstraernos de a que medio esta escribiendo el logger.
El otro lugar donde se uso herencia es en el parseo de un mensaje para ser escrito en el log. Los mensajes son formateados por la clase MessageFormatter, que contiene una lista de ChainFormats. Cada hijo de ChainFormat conoce como formatear una parte del objeto Message mediante el metodo sobreescrito String format(Message message). Por ejemplo en el caso del thread id:

public String format(Message message){
	return message.getThreadId();
}

De esta manera, el mensaje a loguear depende del orden de la secuencia de ChainFormats.

Mejoras propuestas:

La primera mejora que se puede hacer es usar un mapa para identificar cada termino del formato de un mensaje y crear los ChainFormats, actualmente se esta usando un switch.
